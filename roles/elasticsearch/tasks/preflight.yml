---

- name: Put SELinux in permissive mode, logging actions that would be blocked.
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: 
    - ansible_os_family == 'RedHat'
    - disable_selinux

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
  when: 
    - ansible_os_family == 'RedHat'
    - disable_selinux

- name: disable firewalld
  ansible.builtin.systemd:
    name: firewalld 
    state: stopped 
    enabled: no
  when: 
    - ansible_os_family == 'RedHat'
    - disable_firewall

- name: disable ufw
  ansible.builtin.systemd:
    name: ufw 
    state: stopped 
    enabled: no
  when: 
    - ansible_os_family == 'Debian'
    - disable_firewall

- name: Install utils
  ansible.builtin.package:
    name: 
      - jq
      - unzip
    state: present
    update_cache: yes    

- ansible.builtin.set_fact:
    virtual_proto: "{{ 'https' if elasticsearch_https_enabled else 'http' }}"

- ansible.builtin.set_fact:
    elastic_ip_address: "{{ item }}"
  when:
    - elasticsearch_subnet is defined
    - "item | ansible.utils.ipaddr( elasticsearch_subnet )"
  with_items: "{{ ansible_all_ipv4_addresses }}"

- ansible.builtin.set_fact:
    elastic_ip_address: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  when:
    - elasticsearch_subnet is not defined

- ansible.builtin.set_fact:
    elastic_iface: "{{ hostvars[inventory_hostname]['ansible_' + item ]['device'] }}"
  when:
    - elasticsearch_subnet is defined
    - "hostvars[inventory_hostname]['ansible_' + item ].ipv4 is defined and hostvars[inventory_hostname]['ansible_' + item ]['ipv4']['address'] | ansible.utils.ipaddr( elasticsearch_subnet )"
  with_items: "{{ ansible_interfaces }}"

- ansible.builtin.set_fact:
    elastic_iface: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
  when:
    - elasticsearch_subnet is not defined